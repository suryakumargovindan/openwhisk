#!/usr/bin/python

import sys
import os
import time
import csv
from datetime import datetime
import requests
import redis
from os import path

r1 = redis.StrictRedis(host='localhost', port=6379, db=1)
r2 = redis.StrictRedis(host='localhost', port=6379, db=2)
r3 = redis.StrictRedis(host='localhost', port=6379, db=3)
r4 = redis.StrictRedis(host='localhost', port=6379, db=4)
r5 = redis.StrictRedis(host='localhost', port=6379, db=5)

arguments = sys.argv
arg_count = len(sys.argv)

now = datetime.now()
dt_string = now.strftime("%Y-%m-%d %H:%M:%S")
request_time = dt_string


#print (sys.argv[0])
#print (arg_count)
#exit()

if len(sys.argv) == 2:
    function = sys.argv[1] 


def runtime():

    # Check and confirm that exactly and only one function is passed at a time as argument to this script
    if arg_count == 2:

        if path.exists(function):

            ext = arguments[1].split('.')

            if len(ext) > 1:
                runtime = ext[1]

                if runtime == 'py':
                    print("\nRuntime is Python!\n")
                    return ("python")
                elif runtime == 'js':
                    print("\nRuntime is JavaScript!")
                    print("\nAt this point function does not support JavaScript! Quitting!\n")
                    time.sleep(1)
                    exit()
                elif runtime == 'rb':
                    print("\nRuntime is Ruby!")
                    print("\nAt this point function does not support JavaScript! Quitting!\n")
                    time.sleep(1)
                    exit()
                elif runtime == 'jar':
                    print("\nRuntime is Java!")
                    print("\nAt this point function does not support Java! Quitting!\n")
                    time.sleep(1)
                    exit()
                elif runtime == 'php':
                    print("\nRuntime is PHP!")
                    print("\nAt this point function does not support PHP! Quitting!\n")
                    time.sleep(1)
                    exit()
                elif runtime == 'swift':
                    print("\nRuntime is Swift!")
                    print("\nAt this point function does not support Swift! Quitting!\n")
                    time.sleep(1)
                    exit()
                elif runtime == 'go':
                    print("\nRuntime is Go!")
                    print("\nAt this point function does not support golang! Quitting!\n")
                    time.sleep(1)
                    exit()
                else:
                    print("\nUnknown runtime! Quitting!\n")
                    time.sleep(1)
                    exit()

            else:
                print("\nRuntime could not be identified! Quitting!\n")
                time.sleep(1)
                exit()

        else:
            print ("\nThe specified function - {} could not be found!\n".format(function))
            print ("Please check the input again!\n")
            print ("Quitting the execution now!\n")
            time.sleep(1)
            exit()

    elif arg_count > 2:
        print ("\nThere are more than one functions found! Please enter only one at a time!\n")
        print ("Quitting the execution now!\n")
        time.sleep(1)
        exit()

    elif arg_count == 1:
        print("\nNo function found to execute! Quitting!\n")
        print("Quitting the execution now!\n")
        time.sleep(1)
        exit()


def container_pulse(container):

    cmd = "ps -ef | grep %s | grep docker | wc -l"%(container)
    count =  os.popen(cmd).read().strip()

    if int(count) > 1:
        pulse  = 1          #Pulse = 1 means warm container is already occupied
    else:
        pulse = 0           #Pulse = 0 means warm container is free and not occupied

    return (pulse)



def logger(cmd2):

    cmd1 = 'echo $(($(date +%s%N)/1000000))'
    exec_start = os.popen(cmd1).read().strip()

    print "Installing required libraries...\n"

    os.system(cmd2)

    cmd3 = ("cat /tmp/pip_log")
    exec_end = os.popen(cmd3).read().strip()

    time = (int(exec_end) - int(exec_start))

    return (time)


def libraries(container):
    
    cmd = "cat %s | grep ^import | sed -e 's/import//g' | sed 's/ //g'" % (function)
    cont = os.popen(cmd).read().strip()
    lib = cont.split()
    
    #print(lib)
    
    for x in lib:
    
        response = requests.get("https://pypi.org/pypi/{}/json".format(x))
    
        if response.status_code == 200:  # Checks if the library is valid
    
            #call cache.py here and install libraries in the new container
    
            lib_cpath = x + '_cpath'
    
            if r3.exists(lib_cpath) == True:
                ## Use the path, install and call cache.py
    
                whl_path = r3.get(lib_cpath)
    
                splt_char = "/"
                K = 3
    
                temp = whl_path.split(splt_char)
                res = splt_char.join(temp[:K]), splt_char.join(temp[K:])
    
                whl = '/cache/' + res[1]

                cmd = "docker exec {0} pip install {1} && echo $(($(date +%s%N)/1000000)) > /tmp/pip_log".format(container,whl)

                install_time = logger(cmd)

                cache(x, install_time)

    
            else:
                
                #Dowload, install and call the cache.py

                print("Downloading libraries as it's not found in cache...\n")

                cmd = "docker exec {0} pip install {1} && echo $(($(date +%s%N)/1000000)) > /tmp/pip_log".format(container,x)

                install_time = logger(cmd)

                cache(x, install_time)

        return (install_time)

def resource(env):
    
    
    #cmd = "docker ps | grep -i %s | grep -i warm | grep -v prewarm | wc -l"%(env)
    #cmd = 'docker ps --filter "name=warm0_" | grep %s | wc -l'%(env)
    #cont = os.popen(cmd).read().strip()
    #print ("\nNo. of warm {} containers running - {}\n".format(env,cont))


    cmd1 = "docker ps | grep -i _%s3 | grep -i warm | grep -v prewarm | wc -l"%(env)
    warm = os.popen(cmd1).read().strip()


    if int(warm) == 1:   #This means at least one warm container is present

        execution_type = "warm"

        cmd = "docker ps --format '{{.Names}}' | grep -i _%s3 | grep -i warm | grep -v prewarm"%(env)
        out = os.popen(cmd).read().strip().split()
        containers = sorted(out)

        for x in containers:

            pulse = container_pulse(x)

            if pulse == 0:
                container = x
                break


    else:        #Create a new warm container 

        execution_type = "cold"
        
        container = 'warm0_1_python3'
        cmd = "docker run -v /root/.cache/:/cache/ -dit --name %s python:rc-alpine3.12"%container
        os.popen(cmd)


    install_time = libraries(container) #install required libraries on new container
    execution_time = execute(container, function) #execute the function in new container

    total_time = int(install_time) + int(execution_time) #Calculate total execution time

    with open('/function/test/functions_list.csv', 'a') as file:
        writer = csv.writer(file)
        writer.writerow([request_time, function, total_time, execution_type])


    
def execute(container,request): #to execute the function and then stop the container


    cmd0 = "docker cp {0} {1}:/".format(request, container)
    os.popen(cmd0)

    print "\n"

    cmd1 = 'echo $(($(date +%s%N)/1000000))'
    exec_start = os.popen(cmd1).read().strip()

    print ("Output of the execution is:\n")
    print ("{")

    cmd2 = "docker exec -i {0} python /{1} && echo $(($(date +%s%N)/1000000)) > /tmp/exec_log".format(container,request)
    os.system(cmd2)

    print ("}")

    cmd3 = ("cat /tmp/exec_log")
    exec_end = os.popen(cmd3).read().strip()

    execution_time = (int(exec_end) - int(exec_start))

    print ("\nExecution complete! Function execution time is - {}ms\n".format(execution_time))

    cmd2 = "docker container kill {0}".format(container)
    os.popen(cmd2)

    cmd3 = "docker container rm {0}".format(container)
    os.popen(cmd3)

    return (execution_time)


def cache(lib, install_time):

    lib_freq = lib+'_freq'
    lib_count = lib+'_count'
    lib_cpath = lib+'_cpath'
    lib_last_used = lib+'_last_used'
    lib_install_time = lib+'_install_time'
    cpath = 'None'

    cache_dir = "/root/.cache/pip/wheels"

    now = datetime.now()
    today = now.strftime("%Y-%m-%d")

    if path.exists(cache_dir):

        cmd = "find %s -name '*.whl' | grep -i %s"%(cache_dir,lib)
        cpath = os.popen(cmd).read().strip()


    entry = r1.exists(lib_freq)
    time = r5.exists(lib_install_time)
    freq = r1.get(lib_freq)
    #print(r1.get(lib_freq))
    #print(freq)


    if time == 0:
        r5.set(lib_install_time, install_time)

    else:
        time_old = r5.get(lib_install_time)
        
        if int(time_old) < int(install_time):
            r5.set(lib_install_time, install_time)

    if entry == 0:
        r1.set(lib_freq,'NEW')
        r2.set(lib_count,1)
        r4.set(lib_last_used,today)


    elif (entry !=0 and freq == 'NEW'):
        r1.set(lib_freq,'INFREQUENT')
        r2.set(lib_count,2)
        r4.set(lib_last_used,today)
    elif (entry !=0 and freq == 'INFREQUENT'):

        count = int(r2.get(lib_count))

        if count >= 2:

            r1.set(lib_freq,'FREQUENT')
            r4.set(lib_last_used,today)

            # Find the cache path, update it in redis and retain the cache

            cmd = "find ~/.cache/pip/wheels -name '*.whl' |grep -i %s-"%lib
            result = os.popen(cmd).read().strip()
            cpath = result.split()

            if path.exists(cpath[0]):
                r3.set(lib_cpath,cpath[0])

        elif count < 2:

            count += 1
            r2.set(lib_count,count)
            r4.set(lib_last_used,today)


    elif (entry !=0 and freq == 'FREQUENT'):

        # Check last used date of library, if it's used more than 10 days before then delete it and set status again to infrequent
        # print("The library is used frequently!")
        r4.set(lib_last_used,today)

    now = datetime.now()
    today = now.strftime("%Y-%m-%d")
    last_used = r4.get(lib_last_used)

    d1 = datetime.strptime(today, "%Y-%m-%d")
    d2 = datetime.strptime(last_used, "%Y-%m-%d")
    difference = (abs((d1 - d2).days))

    if difference == 0:

        ##remove the cache
        #print ("Library was used very recently!")

        r1.exists(lib_cpath)
        #print (path)


env = runtime()
pulse = resource(env)
